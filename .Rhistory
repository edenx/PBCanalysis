plot_pred(colMeans(yrep_))
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
plot_pred(colMeans(yrep_), compare=FALSE)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_))
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
print(rsurf_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), compare=FALSE)
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
print(pred_)
}
}
# prediction: spatial plot
plot_pred <- function(pred, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing"), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep), compare=FALSE)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_))
# precompute the RFF for each lengthscale
alphas <- seq(0.2, 1, length.out = 30)
lis_Phi <- list()
lis_Phi_ <- list()
for(i in 1:length(alphas)){
alpha <- alphas[i]
lis_Phi[[i]] <- sim_rff(lis_wcentr, alpha=alpha)
lis_Phi_[[i]] <- cbind(lis_Phi[[i]], PBC$Income, PBC$Crime, PBC$Environment, PBC$Employment,
PBC$Barriers, PBC$propmale, PBC$Education)
}
log_pop <- log(PBC$pop)
# the best lengthscale with ridge glm
cv_output <- alpha_cv(lis_Phi_, offset=log_pop)
min_index <- cv_output$min_index
best_alpha <- cv_output$best_ls
best_pred <- cv_output$best_pred
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
# when including the covariates
# with the lengthscale selected by ridge glm
options(mc.cores = parallel::detectCores())
SEED <- 727282
dat_ <- as.data.frame(lis_Phi_[[min_index_]]) %>%
mutate(count=count
, log_pop=scale(log(PBC$pop), center=FALSE)
)
tic(paste0("Model fitting with lengthscale=", alphas[min_index_]))
stan_mod_ <- stan_glm(count ~ . -log_pop,
offset=log_pop,
data=dat_, family=poisson,
prior=normal(0, sqrt(2)), prior_intercept=normal(0,5),
control = list(max_treedepth = 20),
# chains=5,
# thin=5,
seed=SEED, verbose=TRUE)
toc()
yrep_ <- posterior_predict(stan_mod_)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_))
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
min_index
alphas[5]
best_alpha
best_pred
# when including the covariates
# with the lengthscale selected by ridge glm
options(mc.cores = parallel::detectCores())
SEED <- 727282
dat_ <- as.data.frame(lis_Phi_[[min_index]]) %>%
mutate(count=count
, log_pop=scale(log(PBC$pop), center=FALSE)
)
tic(paste0("Model fitting with lengthscale=", alphas[min_index]))
stan_mod_ <- stan_glm(count ~ . -log_pop,
offset=log_pop,
data=dat_, family=poisson,
prior=normal(0, sqrt(2)), prior_intercept=normal(0,5),
control = list(max_treedepth = 20),
# chains=5,
# thin=5,
seed=SEED, verbose=TRUE)
toc()
yrep_ <- posterior_predict(stan_mod_)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_))
# prediction: spatial plot
plot_pred <- function(pred, ls, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
print(pred_)
}
}
min_index
best_alpha
best_alpha_
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), best_alpha)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
# prediction: spatial plot
plot_pred <- function(pred, ls, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,8)) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
max(count)
# prediction: spatial plot
plot_pred <- function(pred, ls, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,7)) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1, limits=c(0,7)) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
hist(yrep)
hist(colMeans(yrep))
hist(colMeans(yrep_))
bias(yrep_)
rmse(yrep_)
cp95(yrep_)
table(colMeans(yrep_))
table(round(colMeans(yrep_)))
table(count)
# the best lengthscale with ridge glm
cv_output <- alpha_cv(lis_Phi_, tune_param=0.5, offset=log_pop)
min_index <- cv_output$min_index
best_alpha <- cv_output$best_ls
best_pred <- cv_output$best_pred
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
min_index <- cv_output$min_index
best_alpha <- cv_output$best_ls
best_pred <- cv_output$best_pred
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
# when including the covariates
# with the lengthscale selected by ridge glm
options(mc.cores = parallel::detectCores())
SEED <- 727282
dat_ <- as.data.frame(lis_Phi_[[min_index]]) %>%
mutate(count=count
, log_pop=scale(log(PBC$pop), center=FALSE)
)
tic(paste0("Model fitting with lengthscale=", alphas[min_index]))
stan_mod_ <- stan_glm(count ~ . -log_pop,
offset=log_pop,
data=dat_, family=poisson,
prior=normal(0, sqrt(2)), prior_intercept=normal(0,5),
control = list(max_treedepth = 20),
# chains=5,
# thin=5,
seed=SEED, verbose=TRUE)
toc()
yrep_ <- posterior_predict(stan_mod_)
best_alpha
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
# prediction: spatial plot
plot_pred <- function(pred, ls, compare=TRUE, count="X"){
if(compare){
sf_pred <- PBC[, c("geometry", paste0(count))] %>%
mutate(pred=pred, normpop=lis_wcentr) %>%
rename(count=paste0(count))
pop_ <- ggplot() +
geom_sf(data=sf_pred["count"], aes(fill=count), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x="Northing", y="Easting")
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
gridExtra::grid.arrange(pop_, pred_, nrow=2)
}else{
sf_pred <- PBC[, c("geometry")] %>%
mutate(pred=pred, normpop=lis_wcentr)
pred_ <- ggplot() +
geom_sf(data=sf_pred["pred"], aes(fill=pred), lwd=0.05) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_linedraw() +
labs(x=paste0("Northing/ lengthscale=", ls), y="Easting")
print(pred_)
}
}
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
bias(yrep_)
rmse(yrep_)
cp95(yrep_)
# the best lengthscale with regularised glm
cv_output <- alpha_cv(lis_Phi_, tune_param=0, offset=log_pop)
min_index <- cv_output$min_index
best_alpha <- cv_output$best_ls
best_pred <- cv_output$best_pred
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
table(round(colMeans(yrep_)))
best_alpha
# when including the covariates
# with the lengthscale selected by ridge glm
options(mc.cores = parallel::detectCores())
SEED <- 727282
dat_ <- as.data.frame(lis_Phi_[[min_index]]) %>%
mutate(count=count
, log_pop=scale(log(PBC$pop), center=FALSE)
)
tic(paste0("Model fitting with lengthscale=", alphas[min_index]))
stan_mod_ <- stan_glm(count ~ . -log_pop,
offset=log_pop,
data=dat_, family=poisson,
prior=normal(0, sqrt(2)), prior_intercept=normal(0,5),
control = list(max_treedepth = 20),
# chains=5,
# thin=5,
seed=SEED, verbose=TRUE)
toc()
yrep_ <- posterior_predict(stan_mod_)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
bias(yrep_)
rmse(yrep_)
cp95(yrep_)
# the best lengthscale with regularised glm
cv_output <- alpha_cv(lis_Phi_, tune_param=0.3, offset=log_pop)
min_index <- cv_output$min_index
best_alpha <- cv_output$best_ls
best_pred <- cv_output$best_pred
hist(best_pred, main=paste0("Best Lengthscale is ", best_alpha))
# ====================================================================== #
#                   fit Stan model with selected lengthscale             #
# ====================================================================== #
options(mc.cores = parallel::detectCores())
SEED <- 727282
dat_ <- as.data.frame(lis_Phi_[[min_index]]) %>%
mutate(count=count
, log_pop=scale(log(PBC$pop), center=FALSE)
)
tic(paste0("Model fitting with lengthscale=", alphas[min_index]))
stan_mod_ <- stan_glm(count ~ . -log_pop,
offset=log_pop,
data=dat_, family=poisson,
prior=normal(0, sqrt(2)), prior_intercept=normal(0,5),
control = list(max_treedepth = 20),
# chains=5,
# thin=5,
seed=SEED, verbose=TRUE)
toc()
yrep_ <- posterior_predict(stan_mod_)
# PLOT:: spatial prediction with the ridge glm selected lengthscale
# plot_pred(exp(stan_mod$linear.predictors))
plot_pred(colMeans(yrep_), round(best_alpha, 2))
bias(yrep_)
rmse(yrep_)
cp95(yrep_)
