Gradient_descent(0.8,y,beta=0.8)
# backtracking gamma
Gradient_descent <- function(x0, y, gamma0=0.01, beta=0.5, epsilon=0.001, th=200,
flag=TRUE, flag2=TRUE, flag3=TRUE){
new <- x0
n <- 0
while(flag){
n <- n+1
cat("Iteration", n, "\n")
old <- new
gamma <- gamma0/beta
while(flag2){
prop <- old - gamma*grad(old,y)
cat("prop is", prop, "\n")
flag2 <- (prop<0 || prop>1)
gamma <- beta*gamma
cat("the new gamma is", flag2, "\n")
}
while(flag3){
prop <- old - gamma*grad(old,y)
cat("prop is", prop, "\n")
flag3 <- (loglik(prop,y)>loglik(old,y)-alpha*gamma*grad(old,y)^2)
gamma <- beta*gamma
cat("the new gamma is", gamma, "\n")
}
flag <- (abs(prop-old)>epsilon)
print(abs(prop-old))
# flag <- (abs(grad(prop,y))>epsilon)
new <- prop
cat("new is", new, "\n")
if(n>th){
cat("Algorithm is not converging!!! Iteration reaches threshold.")
return(NULL)
}
}
return(new)
}
y <- c(125, 18, 20, 34)
Gradient_descent(0.8,y,beta=0.8)
# backtracking gamma
Gradient_descent <- function(x0, y, gamma0=0.01, beta=0.5, epsilon=0.001, th=200,
flag=TRUE){
new <- x0
n <- 0
while(flag){
n <- n+1
cat("Iteration", n, "\n")
old <- new
gamma <- gamma0/beta
flag2=TRUE; flag3=TRUE
while(flag2){
prop <- old - gamma*grad(old,y)
cat("prop is", prop, "\n")
flag2 <- (prop<0 || prop>1)
gamma <- beta*gamma
cat("the new gamma is", flag2, "\n")
}
while(flag3){
prop <- old - gamma*grad(old,y)
cat("prop is", prop, "\n")
flag3 <- (loglik(prop,y)>loglik(old,y)-alpha*gamma*grad(old,y)^2)
gamma <- beta*gamma
cat("the new gamma is", gamma, "\n")
}
flag <- (abs(prop-old)>epsilon)
print(abs(prop-old))
# flag <- (abs(grad(prop,y))>epsilon)
new <- prop
cat("new is", new, "\n")
if(n>th){
cat("Algorithm is not converging!!! Iteration reaches threshold.")
return(NULL)
}
}
return(new)
}
Gradient_descent(0.8,y,beta=0.8)
# backtracking gamma
Gradient_descent <- function(x0, y, gamma0=0.01, beta=0.5, epsilon=0.001, th=200,
flag=TRUE){
new <- x0
n <- 0
while(flag){
n <- n+1
cat("Iteration", n, "\n")
old <- new
gamma <- gamma0/beta
flag2=TRUE; flag3=TRUE
while(flag2){
prop <- old - gamma*grad(old,y)
flag2 <- (prop<0 || prop>1)
gamma <- beta*gamma
}
while(flag3){
prop <- old - gamma*grad(old,y)
flag3 <- (loglik(prop,y)>loglik(old,y)-alpha*gamma*grad(old,y)^2)
gamma <- beta*gamma
}
flag <- (abs(prop-old)>epsilon)
print(abs(prop-old))
# flag <- (abs(grad(prop,y))>epsilon)
new <- prop
cat("new is", new, "\n")
if(n>th){
cat("Algorithm is not converging!!! Iteration reaches threshold.")
return(NULL)
}
}
return(new)
}
y <- c(125, 18, 20, 34)
lis_conv_gd <- c()
for(i in seq(0.11,0.99,by=0.01)){
cat("the initial value is ", i, "\n")
lis_conv_gd <- c(lis_conv_gd, Gradient_descent(i,y, beta=0.8))
}
plot(seq(0.11,0.99,by=0.01), lis_conv_gd)
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main="Convergence Result of Gradient Descent Algorithm",
xlab="Initial Value", ylab=expression(pi))
abline(h=round(mean(lis_conv),3), col="brown")
# backtracking gamma
Gradient_descent <- function(x0, y, gamma0=0.01, beta=0.5, epsilon=0.001, th=200,
flag=TRUE){
new <- x0
n <- 0
while(flag){
n <- n+1
cat("Iteration", n, "\n")
old <- new
gamma <- gamma0/beta
flag2=TRUE; flag3=TRUE
while(flag2){
prop <- old - gamma*grad(old,y)
flag2 <- (prop<0 || prop>1)
gamma <- beta*gamma
}
while(flag3){
prop <- old - gamma*grad(old,y)
flag3 <- (loglik(prop,y)>loglik(old,y)-alpha*gamma*grad(old,y)^2)
gamma <- beta*gamma
}
# flag <- (abs(prop-old)>epsilon)
flag <- (abs(grad(prop,y))>epsilon)
new <- prop
cat("new is", new, "\n")
if(n>th){
cat("Algorithm is not converging!!! Iteration reaches threshold.")
return(NULL)
}
}
return(new)
}
y <- c(125, 18, 20, 34)
lis_conv_gd <- c()
for(i in seq(0.11,0.99,by=0.01)){
cat("the initial value is ", i, "\n")
lis_conv_gd <- c(lis_conv_gd, Gradient_descent(i,y, beta=0.8))
}
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main="Convergence Result of Gradient Descent Algorithm",
xlab="Initial Value", ylab=expression(pi))
abline(h=round(mean(lis_conv),3), col="brown")
round(mean(lis_conv)
,3)
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main="Convergence Result of Gradient Descent Algorithm",
xlab="Initial Value", ylab=expression(pi))
abline(h=mean(lis_conv), col="brown")
mean(lis_conv)
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main="Convergence Result of Gradient Descent Algorithm",
xlab="Initial Value", ylab=expression(pi))
abline(h=mean(lis_conv), col="brown")
abline(h=mean(lis_conv), col="brown")
# deterministic gamma
Gradient_descent_det <- function(x0, y, beta=0.8, gamma0=0.0001, epsilon=0.01, flag=TRUE){
new <- x0
n <- 0
while(flag){
n <- n + 1
print(n)
old <- new
gamma <- gamma0
new <- old - gamma*grad(old, y)
print(grad(new, y))
flag <- abs(grad(new, y))>epsilon
if(n>200){
break
}
}
return(new)
}
lis_conv
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main="Convergence Result of Gradient Descent Algorithm",
xlab="Initial Value", ylab=expression(pi))
abline(h=mean(lis_conv_gd), col="brown")
mean(lis_conv_gd)
plot(seq(0.11,0.99,by=0.01), lis_conv_gd, type="b",
main=expression(paste("Value of convergence for ", pi, " (0.627 up to 3 d.p)")),
xlab="Initial Value", ylab=expression(pi))
abline(h=mean(lis_conv_gd), col="brown")
range(c(1,4,6))
diff(range(c(1,4,6)))
lis_r <- c()
for(j in 1:1000){
y <- sample(1:2000, 4)
# lis_conv_ <- c()
# for(i in 1:100){
#         lis_conv_ <- c(lis_conv_, EM(runif(1),y))
# }
# lis_mean <- c(lis_mean, mean(lis_conv_))
lis_r <- c(lis_r, diff(range(lis_conv_)))
# if(all(lis_conv_>0 & lis_conv_<1)){
#         lis_mean <- c(lis_mean, mean(lis_conv_))
# }
}
x <- mean(lis_conv)
hist(lis_r)
lis_r
plot(lis_conv_)
plot(lis_conv_, main="Length of Range of convergence value")
plot(lis_conv_, main="Length of Range of convergence value", ylab="Difference")
# arbitrary y
lis_mean <- c()
lis_p <- c()
lis_r <- c()
for(j in 1:1000){
y <- sample(1:2000, 4)
lis_conv_ <- c()
for(i in 1:100){
lis_conv_ <- c(lis_conv_, EM(runif(1),y))
}
# lis_mean <- c(lis_mean, mean(lis_conv_))
lis_r <- c(lis_r, diff(range(lis_conv_)))
# if(all(lis_conv_>0 & lis_conv_<1)){
#         lis_mean <- c(lis_mean, mean(lis_conv_))
# }
}
plot(lis_conv_, main="Length of Range of convergence value", ylab="Difference")
plot(lis_r, main="Length of Range of convergence value", ylab="Difference")
library(SDALGCP)
library(sf)
library(raster)
library(tidyverse)
library(tictoc)
library(ggplot2)
library(dplyr)
library(reshape2)
library(randtoolbox)
library(SDALGCP)
library(glmnet)
library(rstanarm)
library(INLA)
setwd("~/Documents/PBCanalysis/ArealKernel")
source("WrapperFunc.r")
# create aggregated Kernel
ls <- 0.4
regker <- create_ker(ls, PBCshp, pop_den, plot=TRUE)
tif_name <- 'population_mwi_2018-10-01.tif'
pop_malawi <- raster(tif_name)
res(pop_malawi)
# resolution is 0.0002777778, aggregate to 30 by 30
pop_malawi.aggre <- aggregate(pop_malawi, fact=100)
res(pop_malawi.aggre)
plot(pop_malawi.aggre)
# get spatial data of malawi
df <- readRDS("~/Documents/sae/data/prev_malawi_2015.rds") %>%
st_as_sf() %>%
mutate(y = est * n_obs, # y: total number of cases (ignores survey design)
l_prev = qlogis(est), # l_prev: log prevalence estimate
l_prev_se = se / (est * (1 - est))) # l_prev_se: calculated by delta method
pop_malawi.aggre
plot(pop_malawi.aggre)
plot(pop_malawi.aggre)
res(pop_malawi.aggre)
plot(pop_malawi.aggre)
# get spatial data of malawi
df <- readRDS("~/Documents/sae/data/prev_malawi_2015.rds") %>%
st_as_sf() %>%
mutate(y = est * n_obs, # y: total number of cases (ignores survey design)
l_prev = qlogis(est), # l_prev: log prevalence estimate
l_prev_se = se / (est * (1 - est))) # l_prev_se: calculated by delta method
# INLA: bym3 ----------------------------------------------------------------------------------
# create aggregated Kernel
ls <- 0.4
regker <- create_ker(ls, df, pop_malawi.aggre, plot=TRUE)
plot(pop_malawi.aggre)
plot(pop_malawi)
plot(pop_malawi.aggre)
plot(pop_malawi.aggre)
library(sf)
library(raster)
library(tidyverse)
library(tictoc)
library(ggplot2)
library(dplyr)
library(reshape2)
source("WrapperFunc.r")
# Data preprocessing ------------------------------------------------------------------------------
## Get population density data from FB HRSL
# geotiff_file <- "https://data.humdata.org/dataset/8c2c0b1f-66af-4a8e-b30e-59ad2249ee24/resource/d83a3bad-b72a-4e4e-9be9-93b4c654ac0f/download/population_mwi_2018-10-01.zip"
# download.file(geotiff_file, "pop_malawi_geotiff.zip")
# unzip("pop_malawi_geotiff.zip")
tif_name <- 'population_mwi_2018-10-01.tif'
pop_malawi <- raster(tif_name)
res(pop_malawi)
# resolution is 0.0002777778, aggregate to 30 by 30
pop_malawi.aggre <- aggregate(pop_malawi, fact=100)
res(pop_malawi.aggre)
plot(pop_malawi.aggre)
save(pop_malawi.aggre, file="pop_malawi.aggre.Rdata")
res(pop_malawi.aggre)
pop_malawi.aggre
save(pop_malawi.aggre, file="pop_malawi.aggre.Rdata")
load("pop_malawi.aggre.Rdata")
plot(pop_malawi.aggre)
res(pop_malawi.aggre)
rm(pop_malawi.aggre)
load("pop_malawi.aggre.Rdata")
plot(pop_malawi.aggre)
res(pop_malawi.aggre)
regcovar <- select(df_dat, Income, Crime, Environment, Employment,
Barriers, propmale, Education)
sf_dat <- st_as_sf(PBCshp)
df_dat <- sf_dat %>% st_set_geometry(NULL)
library(randtoolbox)
library(SDALGCP)
library(glmnet)
library(rstanarm)
library(INLA)
sf_dat <- st_as_sf(PBCshp)
df_dat <- sf_dat %>% st_set_geometry(NULL)
count <- df_dat$X
regcovar <- select(df_dat, Income, Crime, Environment, Employment,
Barriers, propmale, Education)
head(regker)
head(regcovar)
# precompute the RFF for each lengthscale
alphas <- seq(0.2, 1, length.out = 30)
# precompute the RFF for each lengthscale
alphas <- seq(0.2, 1, length.out = 30)
lis_Phi <- precomp_ker(PBCshp, pop_den, alphas=alphas, if_response=TRUE, response=count,
if_regcovar=TRUE, regcovar=regcovar)
lis_Phi
lis_Phi <- precomp_ker(PBCshp, pop_den, alphas=alphas, if_response=TRUE, response=count,
if_regcovar=TRUE, regcovar=regcovar)
lis_Phi
source("RegKernelFunc.r")
pop_den_ <- raster::intersect(pop_den, PBCshp) %>% replace_na(0)
PBC <- st_as_sf(PBCshp)
PBC_df <- PBC %>% st_set_geometry(NULL)
# value: population density per cell
# weight: the proportion of cell intersected with the polygon
# W: weighted population density per grid intersection with polygon
sf_poly_ <- raster::extract(pop_den_, PBC, cellnumbers=TRUE, small=TRUE,
weights=TRUE, normalizeWeights=FALSE)
lis_centr <- sapply(sf_poly_, function(x) cbind(x, scale(coordinates(pop_den_))[x[,1],]))
lis_wcentr <- sapply(lis_centr, check.0)
# find the exposure risk
pop_den_reg <- sapply(lis_centr, function(x) sum(x[,"value"] * x[,"weight"]))
exposure <- PBC_df$pop/pop_den_reg
# check the distribution of population density
hist(unlist(sapply(lis_wcentr, function(x) x[, "W"])))
table(unlist(sapply(lis_wcentr, function(x) sum(x[, "W"]))))
table(unlist(sapply(lis_wcentr, function(x) sum(x[, "W"]*x[,"weight"]))))
rffker <- sim.rff(lis_wcentr, alpha=0.4, plot=TRUE)
eigen(rffker)
rankMatrix(rffker)
plot(pop_malawi.aggre)
plot_pred(inla.fit_bym3$summary.fitted.values[,1], ls, df, compare=TRUE, df$est)
inla_df <- list(y = round(df$y), m = df$n_obs, id=1:nrow(df))
inla_form <- y ~ 1 + f(id, model = "bym2", graph = inv_regker, scale.model = TRUE, constr=TRUE)
tic()
inla.fit_bym3 <- inla(inla_form,
family = "binomial",
control.family = list(control.link = list(model = "logit")),
data = inla_df,
Ntrials = m,
control.predictor = list(compute = TRUE),
control.compute = list(dic = TRUE))
toc()
plot_pred(inla.fit_bym3$summary.fitted.values[,1], ls, df, compare=TRUE, df$est)
summary(inla.fit_bym3)
ls <- 0.4
regker <- create_ker(ls, df, pop_malawi.aggre, plot=TRUE)
inv_regker <- Matrix::solve(regker)
inla_df <- list(y = round(df$y), m = df$n_obs, id=1:nrow(df))
inla_form <- y ~ 1 + f(id, model = "bym2", graph = inv_regker, scale.model = TRUE, constr=TRUE)
tic()
inla.fit_bym3 <- inla(inla_form,
family = "binomial",
control.family = list(control.link = list(model = "logit")),
data = inla_df,
Ntrials = m,
control.predictor = list(compute = TRUE),
control.compute = list(dic = TRUE))
toc()
plot_pred(inla.fit_bym3$summary.fitted.values[,1], ls, df, compare=TRUE, df$est)
summary(inla.fit_bym3)
plot_pred(inla.fit_bym3$summary.fitted.values[,1], ls, df, compare=TRUE, df$est)
inla.fit_bym3$summary.fitted.values[,1]
df$est
# Neighbor list
nb <- df %>%
as("Spatial") %>%
spdep::poly2nb()
# Graph, used by Stan pairwise ICAR implementation
g <- nb2graph(nb)
inla_fit3 <- inla(inla_formula3,
family = "binomial",
control.family = list(control.link = list(model = "logit")),
data = inla_df,
Ntrials = m,
control.predictor = list(compute = TRUE),
control.compute = list(dic = TRUE))
inla_formula3 <- y ~ 1 + f(id, model = "bym2", graph = nb, scale.model = TRUE)
inla_fit3 <- inla(inla_formula3,
family = "binomial",
control.family = list(control.link = list(model = "logit")),
data = inla_df,
Ntrials = m,
control.predictor = list(compute = TRUE),
control.compute = list(dic = TRUE))
# saveRDS(inla_fit3, "results/inla_fit3.rds")
plot_pred(inla_fit3$summary.fitted.values$mean, NULL, df, compare=TRUE, df$est)
summary(inla_fit3)
# saveRDS(inla_fit3, "results/inla_fit3.rds")
plot_pred(inla_fit3$summary.fitted.values$mean, NULL, df, compare=TRUE, df$est)
ls <- 0.4
regker <- create_ker(ls, PBCshp, pop_den, plot=TRUE)
inv_regker <- Matrix::solve(regker)
tic()
PBC.ker <- inla(update(PBC.form, . ~. +
f(ID, model="bym2", graph=inv_regker,
scale.model=TRUE, constr=TRUE)),
data=PBC_df.bym,
family="poisson", E=exposure,
control.compute=list(dic=TRUE, waic=TRUE, cpo=TRUE),
control.predictor=list(compute = TRUE)
)
toc()
plot_pred(PBC.ker$summary.fitted.values[,1], "NULL", PBC, compare=TRUE, count)
pop_den_ <- raster::intersect(pop_den, PBCshp) %>% replace_na(0)
PBC <- st_as_sf(PBCshp)
PBC_df.bym <- PBC %>% st_set_geometry(NULL) %>%
mutate(ID=1:nrow(.))
tic()
PBC.ker <- inla(update(PBC.form, . ~. +
f(ID, model="bym2", graph=inv_regker,
scale.model=TRUE, constr=TRUE)),
data=PBC_df.bym,
family="poisson", E=exposure,
control.compute=list(dic=TRUE, waic=TRUE, cpo=TRUE),
control.predictor=list(compute = TRUE)
)
toc()
plot_pred(PBC.ker$summary.fitted.values[,1], "NULL", PBC, compare=TRUE, count)
PBC.form <- as.formula(paste("X", paste(c("Income", "Crime", "Environment",
"Employment", "Barriers", "propmale",
"Education"), collapse=" + "),
sep=" ~ "))
PBC.form_ <- X ~ 1
PBC.adj <- poly2nb(PBC)
W.PBC <- nb2mat(PBC.adj, style="B")
W.PBC.rs <- nb2mat(PBC.adj, style="W")
library(rgdal)
library(sp)
library(spdep)
library(SDALGCP)
library(sf)
library(INLA)
PBC.adj <- poly2nb(PBC)
W.PBC <- nb2mat(PBC.adj, style="B")
W.PBC.rs <- nb2mat(PBC.adj, style="W")
tic()
# ICAR component as spatial effect
PBC.bym <- inla(update(PBC.form, . ~. +
f(ID, model="bym2", graph=W.PBC,
scale.model=TRUE, constr=TRUE)),
data=PBC_df.bym,
family="poisson", E=exposure,
control.compute=list(dic=TRUE, waic=TRUE, cpo=TRUE),
control.predictor=list(compute = TRUE)
)
toc()
plot_pred(PBC.bym$summary.fitted.values[,1], "NULL", PBC, compare=TRUE, count)
# using the MVN with aggregated kernel as the spatial effect ------------------------------------
ls <- 0.4
regker <- create_ker(ls, PBCshp, pop_den, plot=TRUE)
inv_regker <- Matrix::solve(regker)
tic()
PBC.ker <- inla(update(PBC.form, . ~. +
f(ID, model="bym2", graph=inv_regker,
scale.model=TRUE, constr=TRUE)),
data=PBC_df.bym,
family="poisson", E=exposure,
control.compute=list(dic=TRUE, waic=TRUE, cpo=TRUE),
control.predictor=list(compute = TRUE)
)
toc()
plot_pred(PBC.ker$summary.fitted.values[,1], "NULL", PBC, compare=TRUE, count)
table(count)
getwd()
save(PBCshp, file="PBCshp.Rdata")
save(pop_den, file="pop_den.Rdata")
save(df, "Malawishp.Rdata")
save(df, file="Malawishp.Rdata")
pkgbuild::has_build_tools(debug = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
